/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Resume_onlyIdRouteImport } from './routes/resume_only.$id'
import { Route as BuilderIdRouteImport } from './routes/builder.$id'
import { ServerRoute as ApiPdfServerRouteImport } from './routes/api.pdf'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Resume_onlyIdRoute = Resume_onlyIdRouteImport.update({
  id: '/resume_only/$id',
  path: '/resume_only/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const BuilderIdRoute = BuilderIdRouteImport.update({
  id: '/builder/$id',
  path: '/builder/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPdfServerRoute = ApiPdfServerRouteImport.update({
  id: '/api/pdf',
  path: '/api/pdf',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/builder/$id': typeof BuilderIdRoute
  '/resume_only/$id': typeof Resume_onlyIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/builder/$id': typeof BuilderIdRoute
  '/resume_only/$id': typeof Resume_onlyIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/builder/$id': typeof BuilderIdRoute
  '/resume_only/$id': typeof Resume_onlyIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/builder/$id'
    | '/resume_only/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/sign-in' | '/builder/$id' | '/resume_only/$id'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/builder/$id'
    | '/resume_only/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  SignInRoute: typeof SignInRoute
  BuilderIdRoute: typeof BuilderIdRoute
  Resume_onlyIdRoute: typeof Resume_onlyIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/pdf': typeof ApiPdfServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/pdf': typeof ApiPdfServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/pdf': typeof ApiPdfServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/pdf' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/pdf' | '/api/auth/$'
  id: '__root__' | '/api/pdf' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPdfServerRoute: typeof ApiPdfServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/pdf': {
      id: '/api/pdf'
      path: ''
      fullPath: '/api/pdf'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
    '/builder/$id': {
      id: '/builder/$id'
      path: '/builder/$id'
      fullPath: '/builder/$id'
      preLoaderRoute: typeof BuilderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resume_only/$id': {
      id: '/resume_only/$id'
      path: '/resume_only/$id'
      fullPath: '/resume_only/$id'
      preLoaderRoute: typeof Resume_onlyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: ''
      fullPath: '/api/auth/$'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/api/pdf': {
      id: '/api/pdf'
      path: '/api/pdf'
      fullPath: '/api/pdf'
      preLoaderRoute: typeof ApiPdfServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/builder/$id': {
      id: '/builder/$id'
      path: '/builder/$id'
      fullPath: '/builder/$id'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/resume_only/$id': {
      id: '/resume_only/$id'
      path: '/resume_only/$id'
      fullPath: '/resume_only/$id'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  SignInRoute: SignInRoute,
  BuilderIdRoute: BuilderIdRoute,
  Resume_onlyIdRoute: Resume_onlyIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPdfServerRoute: ApiPdfServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
